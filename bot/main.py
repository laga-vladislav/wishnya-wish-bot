import telebot
from telebot import types

from model.preferences import *

bot = telebot.TeleBot(token=config.TELEGRAM_BOT_TOKEN)


def ID(message):
    id = message.chat.id
    return id


def start_inline_keyboard(names: dict, buttons_in_row: int = 2, pay_text: str = None):
    buttons = []
    for name in names:
        buttons.append(telebot.types.InlineKeyboardButton(f'{name}', callback_data=f'{names[name]}'))
    if pay_text is not None:
        return telebot.types.InlineKeyboardMarkup(row_width=buttons_in_row).add(
            telebot.types.InlineKeyboardButton(pay_text, pay=True)).add(*[button for button in buttons])
    else:
        return telebot.types.InlineKeyboardMarkup(row_width=buttons_in_row).add(*[button for button in buttons])


def start_modified_inline_keyboard(names: tuple, buttons_in_row: int = 2):
    buttons = []
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=buttons_in_row)
    for name in names:
        for button in name:
            buttons.append(telebot.types.InlineKeyboardButton(f'{button}', callback_data=f'{name[button]}'))
        keyboard.row(*[but for but in buttons])
        buttons = []
    return keyboard


def start_keyboard(names: list, one_time_keyboard: bool, first: str = '', last: str = ''):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                 one_time_keyboard=one_time_keyboard,
                                                 row_width=2)
    if first != '':
        keyboard.row(first)
    if last != '':
        keyboard.add(*names)
        keyboard.row(last)
    else:
        keyboard.add(*names)
    return keyboard


def add_back(keyboard, back_button: dict):
    button = []
    for name in back_button:
        button.append(telebot.types.InlineKeyboardButton(f'{name}', callback_data=f'{back_button[name]}'))
    return keyboard.row(*[but for but in button])


# -------–°–¢–ê–†–¢-----------------------------------
@bot.message_handler(commands=['start'])
def start(message):
    print(message.text)
    id = ID(message)
    invited = False
    if len(message.text.split(' ')) == 2:
        invited = True
    print(invited)
    if invited:
        friend_id = message.text.split(' ')[1]
        if registered(id):
            answer_request(message, friend_id)
        else:
            bot.send_message(id, '–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–≥–æ-—Ç–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n'
                                 '–ü—Ä–∏—Å—Ç—É–ø–∞–π: /registration')
        pass
    else:
        if registered(id):
            bot.send_message(id, '–ü—Ä–∏–≤–µ—Ç! –ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã', reply_markup=types.ReplyKeyboardRemove())
        else:
            bot.send_message(id,
                             '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –∂–µ–ª–∞–Ω–∏–π.\n\n'
                             '–ö–∞–∫–æ–≤–∞ –º–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞?\n'
                             '–°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å—á—ë—Ç –ø–æ–¥–∞—Ä–∫–æ–≤!\n'
                             '–í—ã —Å–ø—Ä–æ—Å–∏—Ç–µ, –∫–∞–∫ —è —Å–º–æ–≥—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ê –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n'
                             '–í—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π, –≤–∞—à –¥—Ä—É–≥ –∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, —á—Ç–æ –≤–∞–º –ø–æ–¥–∞—Ä–∏—Ç—å. –ò –Ω–∞–æ–±–æ—Ä–æ—Ç!\n'
                             '–ö–æ–Ω–µ—á–Ω–æ –∂–µ, –µ—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π :)\n'
                             '–ñ–µ–ª–∞–Ω–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏, —è –º–æ–≥—É —Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Å—è—Ç–∫–∏ –±–µ–∑–¥–µ–ª—É—à–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –≤—ã —Å–µ–±–µ –Ω–∏–∫–æ–≥–¥–∞ –±—ã –Ω–µ –∫—É–ø–∏–ª–∏, –Ω–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –±—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞.\n\n'
                             '–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n/registration',
                             reply_markup=types.ReplyKeyboardRemove())


# -------–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø-----------------------------------
@bot.message_handler(commands=['registration'])
def registration(message):
    id = ID(message)
    if registered(id):
        bot.send_message(id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞')
    else:
        user = User(id)
        if user.register(message.from_user.first_name, message.from_user.username):
            bot.send_message(id, '–£—Å–ø–µ—à–Ω–æ')
            keyboard = start_inline_keyboard({'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å': 'menu',
                                              '–î–æ–±–∞–≤–∏—Ç—å': 'createRequest'}, 2)
            bot.send_message(id,
                             '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Ö —Å–ø–∏—Å–æ–∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö?',
                             reply_markup=keyboard)
        else:
            bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


# -------–î–û–ë–ê–í–ò–¢–¨ –î–†–£–ì–ê-----------------------------------
def create_request(call):
    user_id = ID(call.message)
    usr = User(user_id)
    link = usr.get_link()
    if link is None:
        link = usr.get_link()
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n–í–∞—à –¥—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞—Å. –í–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π, —Ç–æ–≥–¥–∞ –∫–∞–∫ –≤—ã –∏—Ö ‚Äî –Ω–µ—Ç.\n'
                                   '–í–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–¥–ø–∏—Å–∫–∏", –∞ –≤—ã –µ–≥–æ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–π–¥—è –≤ –º–µ–Ω—é "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏".\n'
                                   '–ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞ –≤ –¥—Ä—É–∑—å—è—Ö, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è" –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏".')
        bot.send_message(user_id,
                         f'–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è üëá\n\n{link}',
                         reply_markup=start_inline_keyboard({'–ù–∞–∑–∞–¥': 'friends_friends'}))
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è üëá\n\n'
                                   f'{link}\n\n'
                                   f'–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É. –î–µ–ª–∞–µ—Ç—Å—è —ç—Ç–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ê–∫–∫–∞—É–Ω—Ç.',
                              reply_markup=start_inline_keyboard(
                                  {'–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É': 'account_update', '–ù–∞–∑–∞–¥': 'friends_friends'}, 1))


def answer_request(message, code):
    user_id = ID(message)
    friend_id = decipher_request_link(code)
    if registered(friend_id):
        friend = User(friend_id)
        print(friend)
        name = friend.get_name()
        sent = bot.send_message(chat_id=user_id,
                                text=f'–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {name}?',
                                reply_markup=start_keyboard(['–î–∞', "–ù–µ—Ç"], True))
        bot.register_next_step_handler(sent, poll_answer_request, friend_id, name)
    else:
        bot.send_message(user_id, '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –º–Ω–µ –Ω–µ –∑–Ω–∞–∫–æ–º',
                         reply_markup=start_inline_keyboard({'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'menu'}))


def poll_answer_request(message, friend_id, name):
    user_id = ID(message)
    if message.text == '–î–∞':
        subscribed = User(user_id).subscribe(str(friend_id))
        bot.send_message(chat_id=user_id,
                         text='–î–æ–±–∞–≤–ª—è—é',
                         reply_markup=types.ReplyKeyboardRemove())
        print(subscribed)
        # –ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫ –±—É–¥–µ—Ç, –ø–æ—Ç–æ–º –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—é
        if isinstance(subscribed, Errors):
            if subscribed.__str__() == 'subNotRegistered':
                bot.send_message(user_id, '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –º–Ω–µ –Ω–µ –∑–Ω–∞–∫–æ–º',
                                 reply_markup=start_inline_keyboard({'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'menu'}))
            elif subscribed.__str__() == 'subscribesHimself':
                bot.send_message(user_id, '–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è',
                                 reply_markup=start_inline_keyboard({'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'menu'}))
            elif subscribed.__str__() == 'alreadySubscribed':
                bot.send_message(user_id, f'–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {name}',
                                 reply_markup=start_inline_keyboard({'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'menu'}))
        else:
            bot.send_message(user_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {name}!',
                             reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å–∫–∏': 'friends_subscribes', '–ú–µ–Ω—é': 'menu'}, 1))
    elif message.text == '–ù–µ—Ç':
        bot.send_message(chat_id=user_id,
                         text='–û—Ç–º–µ–Ω–∞',
                         reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(chat_id=user_id,
                         text='–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
                         reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å–∫–∏': '', '–ú–µ–Ω—é': 'menu'}, 1))
    else:
        bot.send_message(user_id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–Ω–∏–∑—É üëá',
                         reply_markup=start_keyboard(['–î–∞', "–ù–µ—Ç"], one_time_keyboard=True))


def add_friend(call):
    data = call.data.split("_")
    friend_id = data[3]
    user_id = call.message.chat.id
    added = User(user_id).add_friend(friend_id)
    print('added =', added)
    friend_name = User(friend_id).get_name()
    if added == 'userNotRegistered':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n –ñ–º–∏ /registration')
    elif added == 'friendNotRegistered':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–Ω–µ –±–æ–ª–µ–µ –Ω–µ –∑–Ω–∞–∫–æ–º',
                              reply_markup=start_modified_inline_keyboard(({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers'},
                                                                           {"–ú–µ–Ω—é": 'menu'})))
    elif added == 'friendNotInSubscribers':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
                              reply_markup=start_modified_inline_keyboard(({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers'},
                                                                           {"–ú–µ–Ω—é": 'menu'}))
                              )
    elif added == 'userNotInFriendSubscribers':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
                              reply_markup=start_modified_inline_keyboard(({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers'},
                                                                           {"–ú–µ–Ω—é": 'menu'}))
                              )
    elif added == 'addingHimself':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è',
                              reply_markup=start_modified_inline_keyboard(({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers'},
                                                                           {"–ú–µ–Ω—é": 'menu'}))
                              )
    elif added == 'alreadyInFriendList':
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π',
                              reply_markup=start_modified_inline_keyboard(
                                  ({'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π': 'friends_friends', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_friends'},
                                   {"–ú–µ–Ω—é": 'menu'}))
                              )
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'{friend_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!',
                              reply_markup=start_modified_inline_keyboard(
                                  ({'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π': 'friends_friends', '–ù–∞–∑–∞–¥': 'friends_subscribers'},
                                   {'–ú–µ–Ω—é': 'menu'},)))

# -------–£–î–ê–õ–ò–¢–¨ –î–†–£–ì–ê-----------------------------------
def delete_friend(call, deleting: bool = False):
    friend_id = call.data.split('_')[3]
    if deleting:
        user = User(call.message.chat.id)
        deleted = user.delete_friend(friend_id=friend_id)
        if deleted:
            friendlist = telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'friend_friends_id_{friend_id}')
            menu = telebot.types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
            keyboard = telebot.types.InlineKeyboardMarkup(row_width=2).add(friendlist, menu)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö',
                                  reply_markup=keyboard)
        else:
            menu = telebot.types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
            keyboard = telebot.types.InlineKeyboardMarkup(row_width=1).add(menu)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö',
                                  reply_markup=keyboard)
    else:
        keyboard = start_inline_keyboard({'–î–∞': f"friend_friends_delete_{friend_id}_yes",
                                          "–ù–µ—Ç": f"friend_friends_delete_{friend_id}_no"})
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f'–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {User(friend_id).get_info()["name"]} –∏–∑ –≤–∞—à–µ–≥–æ '
                                   f'—Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö?',
                              reply_markup=keyboard)


# -------–ù–ê–°–¢–†–û–ö–ò –ê–ö–ö–ê–£–ù–¢–ê-----------------------------------
def account_settings(call):
    keyboard = start_modified_inline_keyboard(
        ({'–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ': 'account_update', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç': 'account_delete'},
         {'–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏': 'friends_subscribes'},
         {'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers'},
         {'–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏': 'premium'},
         {'–ù–∞–∑–∞–¥': 'menu'}),
        buttons_in_row=2)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç.',
                          reply_markup=keyboard)


# -------–û–ë–ù–û–í–ò–¢–¨ –î–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–ê-----------------------------------
def account_update(call):
    keyboard = start_inline_keyboard({'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å': 'account_update_yes',
                                      '–û—Ç–º–µ–Ω–∏—Ç—å': 'account_update_no'})
    if call.data == 'account_update':
        bot.edit_message_text(chat_id=ID(call.message),
                              message_id=call.message.message_id,
                              text='–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n'
                                   '–í—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∑–∞–º–µ—á–∞–ª–∏, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ,'
                                   '–≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–∞–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¢–µ–ª–µ–≥—Ä–∞–º.\n'
                                   '–¢–∞–∫–∏–µ –∫–∞–∫ "–ò–º—è" –∏ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".\n'
                                   '–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –º–Ω–æ—é –≤—ã—à–µ —Å–ø–∏—Å–∫–∞ –∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è '
                                   '–∑–∞–ø–æ–º–Ω–∏–ª –∏—Ö –∑–∞–Ω–æ–≤–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëá',
                              reply_markup=keyboard)
    elif call.data == 'account_update_yes':
        sent = bot.edit_message_text(text='–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É:\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 + 4?',
                                     chat_id=ID(call.message),
                                     message_id=call.message.message_id,
                                     reply_markup=None)
        bot.register_next_step_handler(sent, done_account_update)
    else:
        menu(call.message, True)


def done_account_update(message):
    if User(ID(message)).update_info(name=message.from_user.first_name,
                                     username=f'@{message.from_user.username}'):
        bot.send_message(ID(message), '–Ø –Ω–µ –∑–Ω–∞—é! –ù–∞–≤–µ—Ä–Ω–æ–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ :)\n–í –æ–±—â–µ–º, –¥–∞–Ω–Ω—ã–µ —è –æ–±–Ω–æ–≤–∏–ª!')
    else:
        keyboard = start_inline_keyboard({'–ú–µ–Ω—é': 'menu'})
        bot.send_message(ID(message),
                         '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ! –°–∫–æ—Ä–æ –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è',
                         reply_markup=keyboard)


# -------–£–î–ê–õ–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢-----------------------------------
def delete_account(call, deleting_mode: bool = False):
    print(deleting_mode)
    if not deleting_mode:
        keyboard = start_inline_keyboard({'–î–∞': 'account_delete_yes',
                                          '–ù–µ—Ç': 'account_delete_no'})
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è',
                              reply_markup=keyboard)
    else:
        user = User(call.message.chat.id)
        if user.unregister():
            bot.send_message(call.message.chat.id, '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
            try:
                bot.delete_message(chat_id=call.message.chat.id,
                                   message_id=call.message.message_id)
            except Exception as e:
                print('–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤\n\n', e)
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text='–£–¥–∞–ª–µ–Ω–æ')
        else:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
        bot.answer_callback_query(callback_query_id=call.id)


# -------–ú–ï–ù–Æ –ü–û–î–ü–ò–°–ö–ò --------------------------------
def unsubscribe(call, deleting_mode: bool = False):
    user_id = ID(call.message)
    friend_id = call.data.split('_')[3]
    user = User(user_id)
    friend_name = User(friend_id).get_name()
    if deleting_mode:
        deleted = user.unsubscribe(sub_id=friend_id)
        print(deleted.__str__(), Errors('alreadyNotInSubscribes'))
        print(type(str(deleted.__str__())), type(Errors('alreadyNotInSubscribes')))
        if deleted is True:
            msg_text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {friend_name}.'
        elif deleted.__str__() == 'userNotRegistered':
            msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–Ω–µ –±–æ–ª–µ–µ –Ω–µ –∑–Ω–∞–∫–æ–º.'
        elif deleted.__str__() == 'alreadyNotInSubscribes':
            msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ç–∞–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.'
        else:
            msg_text = f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=msg_text,
                              reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å–∫–∏': 'friends_subscribes',
                                                                  '–ú–µ–Ω—é': 'menu'}))
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {friend_name}?',
                              reply_markup=start_inline_keyboard({'–î–∞': f'friend_subscribes_delete_{friend_id}_yes',
                                                                  '–ù–µ—Ç': f'friend_subscribes_delete_{friend_id}_no'}))


def unsubscribe_all(call, deleting_mode: bool = False):
    user_id = ID(call.message)
    if deleting_mode:
        not_registered = False
        deleted = User(user_id).unsubscribe_all()
        if deleted is True:
            msg_text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏.'
        elif deleted.__str__() == 'userNotRegistered':
            not_registered = True
            msg_text = '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n/registration'
        elif deleted.__str__() == 'subscribesAlreadyClean':
            msg_text = '–°–ø–∏—Å–æ–∫ –∏—Ç–∞–∫ –ø—É—Å—Ç.'
        else:
            msg_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
        if not_registered:
            bot.edit_message_text(chat_id=user_id,
                                  message_id=call.message.message_id,
                                  text=msg_text)
        else:
            bot.edit_message_text(chat_id=user_id,
                                  message_id=call.message.message_id,
                                  text=msg_text,
                                  reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å–∫–∏': 'friends_subscribes',
                                                                      '–ú–µ–Ω—é': 'menu'}))
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö?',
                              reply_markup=start_inline_keyboard({'–î–∞': f'friends_subscribes_deleteAll_yes',
                                                                  '–ù–µ—Ç': f'friends_subscribes_deleteAll_no'}))


# -------–ú–ï–ù–Æ –ü–û–î–ü–ò–°–ß–ò–ö–ê--------------------------------
def subscriber(call, subscriber_id):
    user_id = ID(call.message)
    subscriber = User(subscriber_id)
    subscriber_name = subscriber.get_name()
    keyboard = start_modified_inline_keyboard(({'–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è': f'friend_subscribers_add_{subscriber_id}',
                                                '–£–¥–∞–ª–∏—Ç—å': f'friend_subscribers_delete_{subscriber_id}'},
                                               {'–ù–∞–∑–∞–¥': 'friends_subscribers'}), 2)
    bot.edit_message_text(chat_id=user_id,
                          message_id=call.message.message_id,
                          text=f'{subscriber_name} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤–∞—Å.\n\n–í–æ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:',
                          reply_markup=keyboard)


def subscriber_delete(call, deleting_mode: bool = False):
    user_id = ID(call.message)
    friend_id = call.data.split('_')[3]
    friend = User(friend_id)
    friend_name = friend.get_name()
    if deleting_mode:
        deleted = friend.unsubscribe(sub_id=user_id)
        if deleted is True:
            msg_text = f'{friend_name} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º.'
        elif deleted.__str__() == 'userNotRegistered':
            msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–Ω–µ –±–æ–ª–µ–µ –Ω–µ –∑–Ω–∞–∫–æ–º.'
        elif deleted.__str__() == 'alreadyNotInSubscribes':
            msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ç–∞–∫ –Ω–µ —è–≤–ª—è–ª—Å—è –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º'
        else:
            msg_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=msg_text,
                              reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers',
                                                                  '–ú–µ–Ω—é': 'menu'}))
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {friend_name}?',
                              reply_markup=start_inline_keyboard({'–î–∞': f'friend_subscribers_delete_{friend_id}_yes',
                                                                  '–ù–µ—Ç': f'friend_subscribers_delete_{friend_id}_no'}))


def subscriber_deleteAll(call, deleting_mode: bool = False):
    user_id = ID(call.message)
    if deleting_mode:
        not_registered = False
        deleted = User(user_id).unsubscribe_all()
        if deleted is True:
            msg_text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.'
        elif deleted.__str__() == 'userNotRegistered':
            not_registered = True
            msg_text = '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n/registration'
        elif deleted.__str__() == 'subscribersAlreadyClean':
            msg_text = '–°–ø–∏—Å–æ–∫ –∏—Ç–∞–∫ –ø—É—Å—Ç.'
        else:
            msg_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
        if not_registered:
            bot.edit_message_text(chat_id=user_id,
                                  message_id=call.message.message_id,
                                  text=msg_text)
        else:
            bot.edit_message_text(chat_id=user_id,
                                  message_id=call.message.message_id,
                                  text=msg_text,
                                  reply_markup=start_inline_keyboard({'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': 'friends_subscribers',
                                                                      '–ú–µ–Ω—é': 'menu'}))
    else:
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö?',
                              reply_markup=start_inline_keyboard({'–î–∞': f'friends_subscribers_deleteAll_yes',
                                                                  '–ù–µ—Ç': f'friends_subscribers_deleteAll_no'}))


# -------–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô---–ò –ü–û–î–ü–ò–°–ß–ò–ö–û–í--–ò –ü–û–î–ü–ò–°–û–ö------------------------------
def friend_list(call, page_number: int):
    page_index = page_number - 1
    user_id = ID(call.message)
    user = User(user_id)
    subscribers = False
    subscribes = False
    if call.data.split('_')[1] == 'friends':
        list_friends = user.get_friend_list()
    elif call.data.split('_')[1] == 'subscribers':
        subscribers = True
        list_friends = user.get_subscribers()
        if list_friends is None:
            list_friends = []
    else:
        subscribes = True
        list_friends = user.get_subscribes()
        if list_friends is None:
            list_friends = []
    if len(list_friends) == 0:
        bot.answer_callback_query(callback_query_id=call.id)  # —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
        if subscribers:
            keyboard = start_inline_keyboard({'–ù–∞–∑–∞–¥': 'account'}, 1)
        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
        elif subscribes:
            keyboard = start_modified_inline_keyboard(({'–ù–∞–∑–∞–¥': 'account'},), 1)
        # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
        else:
            keyboard = start_inline_keyboard({'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞': 'createRequest',
                                              '–ù–∞–∑–∞–¥': 'menu'}, 1)
        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
        if subscribers:
            message_text = f'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏.\n\n–ó–¥–µ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!'
        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
        elif subscribes:
            message_text = f'–ü–æ–¥–ø–∏—Å–∫–∏.\n\n–ó–¥–µ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!'
        # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
        else:
            message_text = f'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.\n\n' \
                           f'–ó–¥–µ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!\n' \
                           f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É\n' \
                           f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å üëá'
        bot.edit_message_text(chat_id=user_id,  # –º–µ–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç
                              message_id=call.message.message_id,
                              reply_markup=keyboard,
                              text=message_text)
    elif list_friends is None:
        bot.answer_callback_query(callback_query_id=call.id, text='–û—à–∏–±–∫–∞')  # —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    else:
        couples = get_friends_couples(list_of_friends=list_friends,
                                      friends_on_page=5)  # —Ä–∞–∑–±–∏–≤–∞–µ–º –¥—Ä—É–∑–µ–π –ø–æ –∫—É—á–∫–∞–º (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –ø–æ 5 —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        couple = couples[page_index]
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –ª—é–¥—å–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        buttons = []  # –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏
        print("friend_couples -> ", couples)
        print('couple -> ', couple)
        for i in range(len(couple)):  # –∏–¥—ë–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥—É –≤ –∫—É—á–∫–µ
            deleted_friends = 0
            friend = User(couple[i]).get_info()  # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–µ
            name = User(couple[i]).get_name()
            if friend is None:
                deleted_friends += 1
                continue
            print(f'friend {i} -> ', friend)
            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
            if subscribers:
                data = f'friend_subscribers_id_{friend["id"]}'
            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
            elif subscribes:
                data = f'friend_subscribes_id_{friend["id"]}'
            # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
            else:
                data = f'friend_friends_id_{friend["id"]}'
            buttons.append(
                telebot.types.InlineKeyboardButton(  # –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏
                    name,
                    callback_data=data
                )
            )
        for button in buttons:
            keyboard.row(button)  # –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(couples) != 1:
            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
            if subscribers:
                prev = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥',
                                                          callback_data=f'friends_subscribers_prev_{page_number - 1}_{len(couples)}')  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                next = telebot.types.InlineKeyboardButton('–î–∞–ª—å—à–µ ¬ª',
                                                          callback_data=f'friends_subscribers_next_{page_number + 1}_{len(couples)}')
            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
            elif subscribes:
                prev = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥',
                                                          callback_data=f'friends_subscribes_prev_{page_number - 1}_{len(couples)}')  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                next = telebot.types.InlineKeyboardButton('–î–∞–ª—å—à–µ ¬ª',
                                                          callback_data=f'friends_subscribes_next_{page_number + 1}_{len(couples)}')
            # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
            else:
                prev = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥',
                                                          callback_data=f'friends_friends_prev_{page_number - 1}_{len(couples)}')  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                next = telebot.types.InlineKeyboardButton('–î–∞–ª—å—à–µ ¬ª',
                                                          callback_data=f'friends_friends_next_{page_number + 1}_{len(couples)}')
            keyboard.add(prev, next)
        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•------------–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------
        if subscribers or subscribes:
            if subscribers:
                title = '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏.'
                keyboard.row(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –≤ –¥—Ä—É–∑—å—è',
                                                                callback_data='friends_subscribers_acceptAll'))
                keyboard.row(
                    telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö', callback_data='friends_subscribers_deleteAll'))
            else:
                title = '–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏.'
                keyboard.row(
                    telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö', callback_data='friends_subscribes_deleteAll'))
            message_text = f'{title}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∏–∑ {len(couples)}\n–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ ' \
                           f'–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?'
            keyboard.row(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='account'))
        # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
        else:
            message_text = f'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∏–∑ {len(couples)}\n–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ ' \
                           f'–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?'
            add = telebot.types.InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data='createRequest')
            menu = telebot.types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
            keyboard.row(add).row(menu)
        bot.edit_message_text(chat_id=user_id,  # –º–µ–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç
                              message_id=call.message.message_id,
                              reply_markup=keyboard,
                              text=message_text)


# -------–ú–ï–ù–Æ-----------------------------------
@bot.message_handler(commands=['menu'])
def menu(message, from_callback: bool = False):
    id = ID(message)
    if registered(id):
        buttons = {'–î—Ä—É–∑—å—è': 'friends_friends',
                   '–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π': 'wishlist',
                   '–ê–∫–∫–∞—É–Ω—Ç': 'account'}
        keyboard = start_inline_keyboard(buttons)
        if from_callback:
            bot.edit_message_text(chat_id=id,
                                  message_id=message.message_id,
                                  text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª',
                                  reply_markup=keyboard,
                                  disable_web_page_preview=True)
        else:
            bot.send_message(id,
                             '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª',
                             reply_markup=keyboard,
                             disable_web_page_preview=True)


# -------–ñ–ï–õ–ê–ù–ò–Ø –ì–õ–ê–í–ù–ê–Ø-----------------------------------
@bot.message_handler(commands=['wishlist'])  # –º–µ–Ω—é –∂–µ–ª–∞–Ω–∏–π
def wishlist(call, friend_id: int = 0, new_window: bool = False):
    try:
        """""""""""""""""""""PREMIUM"""""""""""""""""""""""""""""
        premium_text = ''
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""
        user_id = call.message.chat.id
        print('call: ', call.data.split('_'), 'user_id: ', user_id, 'friend_id: ', 'new_window: ', new_window)
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
        # ----–ù–ê–® –°–ü–ò–°–û–ö-----------------------------------------------------------------------------------------------
        if friend_id == 0:  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–∞—à —Å–ø–∏—Å–æ–∫
            wishlist = User(user_id).get_wishlist()
            name = ''
        # ----–°–ü–ò–°–û–ö –î–†–£–ì–ê---------------------------------------------------------------------------------------------
        else:  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∞
            friend = User(friend_id)
            friend_info = friend.get_info()
            subscribes = False
            if 'subscribes' in call.data.split('_'):
                subscribes = True
            """""""""""""""""""""PREMIUM"""""""""""""""""""""""""""""
            friend_premium = Premium(friend_id)
            user_premium = Premium(user_id)
            if user_premium.belong():
                if friend_premium.belong():
                    premium_text = '\n\n–¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü—Ä–µ–º–∏—É–º'
                else:
                    premium_text = '\n\n–¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
            if friend_premium.belong():
                print('friend has premium')
                friend_premium.make_view(user_id)
                if subscribes:
                    # ----------------------------------- wishlist = friend.get_wishlist()
                    wishlist = friend.get_wishlist(with_reserved=True)
                else:
                    # --------------------------------------- wishlist = friend_premium.get_total_wishlist(friend_id=user_id)
                    wishlist = friend_premium.get_total_wishlist(friend_id=user_id, with_reserved=True)
                print(wishlist)
            else:
                # --------------------------- wishlist = friend.get_wishlist()
                wishlist = friend.get_wishlist(with_reserved=True)
            """"""""""""""""""""""""""""""""""""""""""""""""""""""""
            name = ' ' + friend.get_name(friend_info)
        print(wishlist)
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
        # ----–°–ü–ò–°–û–ö –ü–£–°–¢----------------------------------------------------------------------------------------------
        if wishlist == -1:  # —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            print("empty")
            # ----–ù–ê–® –°–ü–ò–°–û–ö-------------------------------------------------------------------------------------------
            if friend_id == 0:  # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                keyboard = start_inline_keyboard({'–î–æ–±–∞–≤–∏—Ç—å': 'wishlist_add',
                                                  '–ö–æ—Ä–∑–∏–Ω–∞': 'wishlist_crossed'})
                add_back(keyboard, {'–ù–∞–∑–∞–¥': 'menu'})
                # ----–ò–ó–ú–ï–ù–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï-------------------------------------------------------------------------------
                if not new_window:
                    bot.edit_message_text(chat_id=user_id,
                                          message_id=call.message.message_id,
                                          text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç! –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å?',
                                          reply_markup=keyboard,
                                          disable_web_page_preview=True)
                # ----–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï----------------------------------------------------------------------------------
                else:
                    bot.send_message(chat_id=user_id,
                                     text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç! –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å?',
                                     reply_markup=keyboard,
                                     disable_web_page_preview=True)
            # ----–°–ü–ò–°–û–ö –î–†–£–ì–ê (–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏)-----------------------------------------------------------------------------------------
            else:  # —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∞
                # bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')  # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—ã–∑–æ–≤
                # ans(call)
                if 'friends' in call.data.split('_'):
                    keyboard = start_inline_keyboard({'–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π': f'friend_friends_delete_{friend_id}',
                                                      '–ù–∞–∑–∞–¥': 'friends_friends'}, 1)
                else:
                    keyboard = start_inline_keyboard({'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f'friend_subscribers_delete_{friend_id}',
                                                      '–ù–∞–∑–∞–¥': 'friends_subscribers'}, 1)
                if new_window:
                    bot.send_message(chat_id=user_id,
                                     text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π {name} –ø—É—Å—Ç!{premium_text}',
                                     reply_markup=keyboard,
                                     disable_web_page_preview=True)
                else:
                    bot.edit_message_text(chat_id=user_id,
                                          message_id=call.message.message_id,
                                          text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π {name} –ø—É—Å—Ç!{premium_text}',
                                          reply_markup=keyboard,
                                          disable_web_page_preview=True)
        # ----–°–ü–ò–°–û–ö –ù–ï –ü–£–°–¢-------------------------------------------------------------------------------------------
        else:  # —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç
            print("not empty")
            sorted_wishes = sorted_wishlist(wishlist, reserver_id=user_id)
            print(sorted_wishes)
            # ----–ù–ê–® –°–ü–ò–°–û–ö-------------------------------------------------------------------------------------------
            if friend_id == 0:  # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reserve_text = ''
                keyboard = start_inline_keyboard({'–ò–∑–º–µ–Ω–∏—Ç—å': 'wishlist_edit',
                                                  '–î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏—è': 'wishlist_add',
                                                  '–ö–æ—Ä–∑–∏–Ω–∞': 'wishlist_crossed'})
                add_back(keyboard, {'–ù–∞–∑–∞–¥': 'menu'})  # –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
                name = ''
            # ----–°–ü–ò–°–û–ö –î–†–£–ì–ê----–ò –°–ü–ò–°–û–ö –ü–û–î–ü–ò–°–ß–ò–ö–ê-------------------------------------------------------------------------------------
            else:  # —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∞
                reserve_text = '\n\nü§ô ‚Äî –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∂–µ–ª–∞–Ω–∏—è\nü§å ‚Äî –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º'
                if subscribes:
                    keyboard = start_modified_inline_keyboard(
                        ({"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è": f'friend_subscribes_delete_{friend_id}'},
                         {"–ù–∞–∑–∞–¥": 'friends_subscribes'}), 1)
                else:
                    keyboard = start_inline_keyboard({'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f'friend_friends_delete_{friend_id}',
                                                      '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å': f'friend_friends_reserve_id_{friend_id}',
                                                      '–ù–∞–∑–∞–¥': 'friends_friends'}, 1)
            # ----–ò–ó–ú–ï–ù–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï-----------------------------------------------------------------------------------
            if not new_window:
                bot.edit_message_text(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π{name}.{premium_text}\n\n{sorted_wishes}{reserve_text}',
                                      reply_markup=keyboard,
                                      disable_web_page_preview=True)  # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ–ª–∞–Ω–∏—è–º–∏
            # ----–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï--------------------------------------------------------------------------------------
            else:
                bot.send_message(chat_id=user_id,
                                 text=f'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π{name}.{premium_text}\n\n{sorted_wishes}{reserve_text}',
                                 reply_markup=keyboard,
                                 disable_web_page_preview=True)
            # ans(call)
    except Exception as e:
        print(e)


# -------–ó–ê–†–ï–ó–ï–†–í–ò–†–û–í–ê–¢–¨ –ñ–ï–õ–ê–ù–ò–Ø-------------------------------
def reserve_wishlist(call):
    user_id = call.message.chat.id
    owner_id = int(call.data.split('_')[4])
    if registered(owner_id):
        friend = User(owner_id)
        bot.edit_message_reply_markup(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      reply_markup=None)
        if Premium(owner_id).belong():
            count = len(Premium(owner_id).get_total_wishlist(friend_id=user_id))
        else:
            count = friend.count_of_wishes()
        keyboard = start_keyboard(names=[str(i + 1) for i in range(count)],
                                  one_time_keyboard=True).row('–û—Ç–º–µ–Ω–∞')
        sent = bot.send_message(user_id,
                                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç —Å –∂–µ–ª–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –±—Ä–æ–Ω—å:',
                                reply_markup=keyboard)
        bot.register_next_step_handler(sent, poll_wishlist, call)
    else:
        bot.edit_message_text(chat_id=user_id,
                              text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
                              reply_markup=start_inline_keyboard({'–ú–µ–Ω—é': 'menu'}))


def done_reserve_wishlist(call, index):
    user_id = call.message.chat.id
    owner_id = int(call.data.split('_')[4])
    owner = User(owner_id)
    reserved_wishes = owner.get_reserved_wishes(reserver_id=user_id)
    print(f'owner id = {owner_id}\nreserved_wishes = {reserved_wishes}')
    if reserved_wishes is not None:
        print(
            f'index = {index}, owner_id = {owner_id}, reserved_wishes = {reserved_wishes}, ({(user_id in reserved_wishes.keys())}, {(int(index) in reserved_wishes[user_id]["indexes"])})')
        if user_id in reserved_wishes.keys():
            print(f"index of wish = {index}\nreserved wishes = {reserved_wishes}")
            if int(index) not in reserved_wishes[user_id]['indexes']:
                reserve = owner.reserve_wish(int(index), user_id)
                if isinstance(reserve, Errors):
                    print(reserve)
                    if reserve.__str__() == 'individual wish with this index doesnt exist':
                        bot.send_message(chat_id=user_id,
                                         text='–ö–∞–∂–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä —É–¥–∞–ª–∏–ª –¥–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ!',
                                         reply_markup=types.ReplyKeyboardRemove())
                    elif any(reserve.__str__() == i for i in ['wrong index of individual wish', 'wrong index']):
                        bot.send_message(chat_id=user_id,
                                         text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                                         reply_markup=types.ReplyKeyboardRemove())
                    elif any(reserve.__str__() == i for i in
                             ['already reserved', 'individual wish with this index is already reserved']):
                        bot.send_message(chat_id=user_id,
                                         text='–ö—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ!',
                                         reply_markup=types.ReplyKeyboardRemove())
                    elif reserve.__str__() == 'wishlist is empty':
                        bot.send_message(chat_id=user_id,
                                         text='–ö–∞–∂–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!',
                                         reply_markup=types.ReplyKeyboardRemove())
                    else:
                        bot.send_message(chat_id=user_id,
                                         text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                                         reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(chat_id=user_id,
                                     text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                                     reply_markup=start_inline_keyboard({'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π': 'friends_friends',
                                                                         '–ú–µ–Ω—é': 'menu'}, 1))
                else:
                    bot.send_message(chat_id=user_id,
                                     text=f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—É–Ω–∫—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {index + 1}!',
                                     reply_markup=types.ReplyKeyboardRemove())
                    wishlist(call=call, friend_id=owner_id, new_window=True)
            else:
                unreserve = owner.unreserve_wish(int(index), user_id)
                if isinstance(unreserve, Errors):
                    print(unreserve)
                    bot.send_message(chat_id=user_id,
                                     text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                                     reply_markup=types.ReplyKeyboardRemove())
                else:
                    bot.send_message(chat_id=user_id,
                                     text=f'–û—Ç–ª–∏—á–Ω–æ, —Å–Ω—è–ª –±—Ä–æ–Ω—å —Å –ø—É–Ω–∫—Ç–∞ –Ω–æ–º–µ—Ä {index + 1}.',
                                     reply_markup=types.ReplyKeyboardRemove())
                    wishlist(call=call, friend_id=owner_id, new_window=True)
        else:
            bot.send_message(chat_id=user_id,
                             text='–î–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª!',
                             reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(chat_id=user_id,
                             text='–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä?',
                             reply_markup=start_inline_keyboard(
                                 {'–î–∞': 'friend_friends_reserve_id_533840147', '–ù–µ—Ç': 'friend_friends_id_533840147'}))
    else:
        reserve = owner.reserve_wish(int(index), user_id)
        if isinstance(reserve, Errors):
            print(reserve)
            if reserve.__str__() == 'individual wish with this index doesnt exist':
                bot.send_message(chat_id=user_id,
                                 text='–ö–∞–∂–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä —É–¥–∞–ª–∏–ª –¥–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ!',
                                 reply_markup=types.ReplyKeyboardRemove())
            elif any(reserve.__str__() == i for i in ['wrong index of individual wish', 'wrong index']):
                bot.send_message(chat_id=user_id,
                                 text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                                 reply_markup=types.ReplyKeyboardRemove())
            elif any(reserve.__str__() == i for i in
                     ['already reserved', 'individual wish with this index is already reserved']):
                bot.send_message(chat_id=user_id,
                                 text='–ö—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ!',
                                 reply_markup=types.ReplyKeyboardRemove())
            elif reserve.__str__() == 'wishlist is empty':
                bot.send_message(chat_id=user_id,
                                 text='–ö–∞–∂–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!',
                                 reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(chat_id=user_id,
                                 text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                                 reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(chat_id=user_id,
                             text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                             reply_markup=start_inline_keyboard({'–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π': 'friends_friends',
                                                                 '–ú–µ–Ω—é': 'menu'}, 1))
        else:
            bot.send_message(chat_id=user_id,
                             text=f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—É–Ω–∫—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {index + 1}!',
                             reply_markup=types.ReplyKeyboardRemove())
            wishlist(call=call, friend_id=owner_id, new_window=True)


# -------–ñ–ï–õ–ê–ù–ò–Ø –í–´–ß–ï–†–ö–ù–£–¢–´–ï-----------------------------------
def crossed_wishlist(call):
    user_id = ID(call.message)
    user = User(user_id)
    # ---–ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –í–´–ß–ï–†–ö–ù–£–¢–´–• –ñ–ï–õ–ê–ù–ò–ô------------------------------------------------
    wishlist = user.get_wishlist(True)
    print(call.data.split('_'), user_id, wishlist)
    # ---–ï–°–õ–ò –°–ü–ò–°–û–ö –ü–£–°–¢------------------------------------------------
    if wishlist == -1:
        print("empty")
        bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    else:
        print('not empty')
        keyboard = start_inline_keyboard({'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å': 'wishlist_crossed_return',
                                          '–£–¥–∞–ª–∏—Ç—å': 'wishlist_crossed_delete'})
        add_back(keyboard=keyboard, back_button={'–ù–∞–∑–∞–¥': 'wishlist'})
        sorted_wishes = sorted_wishlist(wishlist=wishlist)  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∂–µ–ª–∞–Ω–∏—è, –Ω—É–º–µ—Ä—É–µ–º
        bot.edit_message_text(chat_id=user_id,
                              message_id=call.message.message_id,
                              text=f'–ö–æ—Ä–∑–∏–Ω–∞.\n{sorted_wishes}',
                              reply_markup=keyboard)


# -------–í–ï–†–ù–£–¢–¨ –ñ–ï–õ–ê–ù–ò–Ø –í–´–ß–ï–†–ö–ù–£–¢–´–ï-----------------------------------
def crossed_wishlist_return(call):
    id = ID(call.message)
    user = User(id)
    crossed_wishlist = user.get_wishlist(True)
    if crossed_wishlist == -1:
        print('–Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ crossed_wishlist_return. —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    else:
        bot.edit_message_reply_markup(chat_id=id,
                                      message_id=call.message.message_id,
                                      reply_markup=None)
        keyboard = start_keyboard(names=[str(i + 1) for i in range(user.count_of_wishes(True))],
                                  first='–ì–æ—Ç–æ–≤–æ',
                                  last='–í—Å–µ',
                                  one_time_keyboard=False).row('–û—Ç–º–µ–Ω–∞')
        sent = bot.send_message(id, '–ö–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Å–ª–µ–¥—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å?', reply_markup=keyboard)
        bot.register_next_step_handler(sent, poll_wishlist, call)


def done_crossed_wishlist_return(call, message, wish_indexes):
    user = User(message.chat.id)
    print(user.get_wishlist(True))
    print('--------------------------------------\n'
          'starting adding wishes to wishlist')
    try:
        print('wish_indexes -> ', wish_indexes)
        added = user.add_wishes(
            wishes=user.get_wishlist_by_indexes(
                indexes=[int(i) for i in wish_indexes],
                crossed=True
            ),
            crossed=False
        )
        if added:
            print('successfully added')
        else:
            print('adding failed')
    except Exception as e:
        print(e, '\n\ntry error in done_crossed_wishlist_return. adding failed')
        bot.send_message(ID(message), '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è!',
                         reply_markup=None)
        return
    print('adding wishes to wishlist ended\n'
          '--------------------------------------')
    print('--------------------------------------\n'
          'starting deleting wishes to wishlist')
    try:
        deleted = User(message.chat.id).delete_wishlist(
            wishes_to_delete=user.get_wishlist_by_indexes(
                indexes=[i for i in wish_indexes],
                crossed=True),
            crossed=True
        )
        if deleted:
            print('successfully deleted')
        else:
            print('deleting failed')
    except Exception as e:
        print(e, '\n\ntry error in done_crossed_wishlist_return. deleting failed')
        bot.send_message(ID(message), '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è!',
                         reply_markup=types.ReplyKeyboardRemove())
        return
    print('deleting wishes to wishlist ended\n'
          '--------------------------------------')
    print(user.get_wishlist(True))
    bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())
    wishlist(call, 0, True)


# -------–î–û–ë–ê–í–õ–ï–ù–ò–ï-----------------------------------
def add_wishes(call):
    ans(call)
    user_id = call.message.chat.id
    cancel_keyboard = start_inline_keyboard({'–ù–∞–∑–∞–¥': 'cancel'}, 1)
    sent = bot.edit_message_text(chat_id=user_id,
                                 message_id=call.message.message_id,
                                 text='–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è!\n'
                                      '–ü—É–Ω–∫—Ç—ã –æ—Ç–¥–µ–ª—è–π—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏, –Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                                 reply_markup=cancel_keyboard)
    bot.register_next_step_handler(sent, add_wishlist, call)


def add_wishlist(message, call):
    user_id = message.chat.id
    if User(user_id).add_wishes(message.text.split('\n')):  # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
        print('add_wishlist. wishes to add -> ', message.text.split('\n'))
        keyboard = start_inline_keyboard({'–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å': 'wishlist',
                                          '–ú–µ–Ω—é': 'menu'}, 1)
        bot.edit_message_text(chat_id=message.chat.id,
                              message_id=call.message.message_id,
                              text='–î–æ–±–∞–≤–ª—è—é')
        bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª', reply_markup=types.ReplyKeyboardRemove())
        wishlist(call, 0, True)
    else:
        print('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ add_wishlist')


# -------–ú–ï–ù–Æ –ò–ó–ú–ï–ù–ï–ù–ò–ô-----------------------------------
def wishlist_editor(call):  # call = wishlist_edit
    if User(call.message.chat.id).get_wishlist() == -1:  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    else:  # –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç
        id = call.message.chat.id
        keyboard = start_inline_keyboard({'–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å': 'wishlist_reedit',
                                          '–£–¥–∞–ª–∏—Ç—å': 'wishlist_delete',
                                          '–í –∫–æ—Ä–∑–∏–Ω—É': 'wishlist_cross'})
        add_back(keyboard, {'–ù–∞–∑–∞–¥': 'wishlist'})  # –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        bot.edit_message_reply_markup(chat_id=id,  # –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π
                                      message_id=call.message.message_id,
                                      reply_markup=keyboard)


# -------–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï-----------------------------------
def reedit_wishlist(call):  # call = wishlist_reedit
    bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=None)
    keyboard = start_keyboard(names=[str(i + 1) for i in range(User(call.message.chat.id).count_of_wishes())],
                              # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—É–Ω–∫—Ç—ã –∂–µ–ª–∞–Ω–∏–π
                              one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
    sent = bot.send_message(call.message.chat.id,
                            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:',
                            reply_markup=keyboard)
    bot.register_next_step_handler(sent, poll_wishlist, call,
                                   None)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ poll_wishlist(sent, call, numb)


def done_reedit_wishlist(message, wish_indexes):
    user = User(message.chat.id)
    # -------–ü–û–õ–£–ß–ò–¢–¨ –¢–ï–ö–°–¢ –ñ–ï–õ–ê–ù–ò–Ø –ò–ó –¢–ï–ö–°–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø, –ù–ê –ö–û–¢–û–†–û–ï –û–¢–í–ï–¢–ò–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨-------------------------------
    keyboard = start_inline_keyboard({'–ó–∞–∫–æ–Ω—á–∏—Ç—å': 'cancel'})
    try:
        wish = get_wish_from_msg(message_text=message.reply_to_message.text, wishlist=user.get_wishlist())
        print('wish -> ', wish)
        # -------–ï–°–õ–ò –ü–û–õ–£–ß–ò–õ–ò-----------------------------------------------------------------------------------------
        if wish is not None:
            # -------–ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–°–¢ –ù–û–í–û–ì–û –ñ–ï–õ–ê–ù–ò–Ø –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø, –ö–û–¢–û–†–û–ï –ü–†–ò–°–õ–ê–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨--------------------------
            # new_wish =
            new_wish = get_word_from_msg(message.text)
            if new_wish is None:
                new_wish = message.text
            print('new_Wish -> ', new_wish)
            # -------–î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú------------------------------------------------------------------------
            usr = User(ID(message))
            wish_index = get_index_from_msg(message.reply_to_message.text)
            if wish_index is None:
                print('error after get_index_from_msg in done_reedit_wishlist')
                keyboard = start_inline_keyboard({'–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π': 'wishlist',
                                                  "–ú–µ–Ω—é": "menu"})
                bot.send_message(ID(message), '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.\n'
                                              '–ü—Ä–∏–¥—ë—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ :)',
                                 reply_markup=keyboard)
                return
            print('index - > ', wish_index)
            if usr.change_wish(index=wish_index, edited_wish=new_wish):
                sent = bot.send_message(ID(message), f'–ó–∞–º–µ–Ω–∏–ª "{wish}"\n–Ω–∞\n"{new_wish}"', reply_markup=keyboard)
            else:
                sent = bot.send_message(ID(message), f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=keyboard)
        else:
            sent = bot.send_message(ID(message), '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                    reply_markup=keyboard)
    except AttributeError as e:
        print(e, 'user did not answer to message')
        sent = bot.send_message(ID(message), '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ '
                                             '–∑–∞–º–µ–Ω–∏—Ç—å', reply_markup=keyboard)
    bot.register_next_step_handler(sent, done_reedit_wishlist, wish_indexes)


# -------–í–´–ß–ï–†–ö–ù–£–¢–¨-----------------------------------
def cross_wishlist(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=None)
    id = ID(call.message)
    keyboard = start_keyboard(names=[str(i + 1) for i in range(User(id).count_of_wishes())],
                              one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
    sent = bot.send_message(call.message.chat.id,
                            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å:',
                            reply_markup=keyboard)
    bot.register_next_step_handler(sent, poll_wishlist, call,
                                   None)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ poll_wishlist(sent, call, sent.message_id)


def done_cross_wishlist(message, call, wish_indexes):
    wishes_to_cross = User(message.chat.id).get_wishlist_by_indexes(indexes=[i for i in wish_indexes])
    print('wishes to cross', wishes_to_cross)
    add = User(message.chat.id).add_wishes(wishes=wishes_to_cross, crossed=True)
    delete = User(message.chat.id).delete_wishlist(wishes_to_delete=wishes_to_cross)
    print('ADD and DELETE = ', add, delete)
    if delete and add:
        bot.edit_message_text(text='–í—ã—á–µ—Ä–∫–∏–≤–∞—é',
                              chat_id=message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=None)
        bot.send_message(ID(message), '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=types.ReplyKeyboardRemove())
        wishlist(call=call, friend_id=0, new_window=True)
    else:
        print('–æ—à–∏–±–∫–∞ –≤ done_cross_wishlist. –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è')
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=types.ReplyKeyboardRemove())


# -------–£–î–ê–õ–ò–¢–¨-----------------------------------
def delete_wishlist(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=None)
    id = ID(call.message)
    crossed = False
    if 'crossed' in call.data.split('_'):
        crossed = True
    keyboard = start_keyboard(names=[str(i + 1) for i in range(User(id).count_of_wishes(crossed=crossed))],
                              one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
    sent = bot.send_message(call.message.chat.id,
                            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å:',
                            reply_markup=keyboard)
    bot.register_next_step_handler(sent, poll_wishlist, call,
                                   None)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ poll_wishlist(sent, call, sent.message_id)


def done_delete_wishlist(message, call, wish_indexes):
    crossed = False
    if 'crossed' in call.data.split('_'):
        crossed = True
    wishes_to_delete = User(message.chat.id).get_wishlist_by_indexes(indexes=[i for i in wish_indexes], crossed=crossed)
    print('wishes to delete', wishes_to_delete)
    deleted = User(message.chat.id).delete_wishlist(wishes_to_delete=wishes_to_delete, crossed=crossed)
    print('DELETE = ', deleted)
    if deleted:
        bot.edit_message_text(text='–£–¥–∞–ª—è—é', chat_id=message.chat.id, message_id=call.message.message_id)
        bot.send_message(ID(message), '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())
        wishlist(call, 0, True)
    else:
        print('–æ—à–∏–±–∫–∞ –≤ done_delete_wishlist. –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ delete –ø–æ–∂–µ–ª–∞–Ω–∏—è')
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=types.ReplyKeyboardRemove())


# -------–û–ü–†–û–°-----------------------------------
def poll_wishlist(message, call, numb=None):
    if numb is None:
        numb = []
    wish_indexes = numb
    data = call.data.split('_')
    """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    if 'premium' in data:
        user_prem = True
    else:
        user_prem = False
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    # --------NOT CROSSED---
    crossed = False
    # --------CROSSED--------
    if 'crossed' in data:
        crossed = True
    user = User(call.message.chat.id)
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    # --------–ì–û–¢–û–í–û---------------------------------------------------------------------------------------------------
    if message.text == '–ì–æ—Ç–æ–≤–æ':  # –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –∂–µ–ª–∞–Ω–∏–π
        print(wish_indexes)
        # ---------–°–í–û–ï–í–†–ï–ú–ï–ù–ù–û–ï –ì–û–¢–û–í–û--------------------------------------------------------------------------------
        if len(wish_indexes) != 0:
            # --------ReEDIT-------------------------------------------------------------------------------------------
            if 'reedit' in data:
                print('reedit ready')
                sent = bot.send_message(message.chat.id,
                                        f'–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ {", ".join([str(index + 1) for index in wish_indexes])}?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------RETURN-------------------------------------------------------------------------------------------
            elif 'return' in data:
                print('return ready')
                sent = bot.send_message(message.chat.id,
                                        f'–í–µ—Ä–Ω—É—Ç—å –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ {", ".join([str(index + 1) for index in wish_indexes])}?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------CROSS--------------------------------------------------------------------------------------------
            elif 'cross' in data:
                print('cross ready')
                sent = bot.send_message(message.chat.id,
                                        f'–í—ã—á–µ—Ä–∫–Ω—É—Ç—å –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ {", ".join([str(index + 1) for index in wish_indexes])}?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------DELETE-----IND WISHLIST DELETE--------------------------------------------------------------------
            elif 'delete' in data:
                print('delete ready', wish_indexes)
                sent = bot.send_message(message.chat.id,
                                        f'–£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ {", ".join([str(index + 1) for index in wish_indexes])}?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            else:
                ans(call, '–û—à–∏–±–∫–∞')
                return
            bot.register_next_step_handler(sent, poll_wishlist, call,
                                           wish_indexes)  # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
        # -----–ù–ï–°–í–û–ï–í–†–ï–ú–ï–ù–ù–û–ï –ì–û–¢–û–í–û----------------------------------------------------------------------------------
        else:
            # --------–î–û–ë–ê–í–õ–Ø–ï–ú –ü–£–ù–ö–¢–´---------------------------------------------------------------------------------
            keyboard = start_keyboard(
                names=[str(i + 1) for i in range(user.count_of_wishes(crossed=crossed))],
                # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—É–Ω–∫—Ç—ã –∂–µ–ª–∞–Ω–∏–π
                one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
            sent = bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤', reply_markup=keyboard)
            bot.register_next_step_handler(sent, poll_wishlist, call,
                                           wish_indexes)  # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
    # --------–ì–û–¢–û–í–û->–î–ê-----------------------------------------------------------------------------------------------
    elif message.text == '–î–∞':  # –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä -> –¥–∞
        # --------–°–í–û–ï–í–†–ï–ú–ï–ù–ù–û–ï –î–ê-------------------------------------------------------------------------------------
        print(wish_indexes, len(wish_indexes))
        if len(wish_indexes) != 0:  # –µ—Å–ª–∏ –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É
            # --------ReEDIT-------------------------------------------------------------------------------------------
            if 'reedit' in data:
                print('reedit yes')
                keyboard = start_inline_keyboard({'–û—Ç–º–µ–Ω–∞': 'cancel'})
                """"""""
                bot.send_message(message.chat.id,
                                 "–ñ–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=types.ReplyKeyboardRemove())
                for msg in range(len(wish_indexes)):
                    wishes_to_reedit = User(message.chat.id).get_wishlist_by_indexes([int(i) for i in wish_indexes])
                    bot.send_message(message.chat.id, f'{str(wish_indexes[msg] + 1)}. {wishes_to_reedit[msg]}')
                sent = bot.send_message(message.chat.id,
                                        f'–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∂–µ–ª–∞–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å',
                                        reply_markup=keyboard)
                """"–†–∞–±–æ—Ç–∞–µ—Ç"""

                bot.register_next_step_handler(sent, done_reedit_wishlist, wish_indexes)
            # --------RETURN-------------------------------------------------------------------------------------------
            elif 'return' in data:
                print('return yes')
                done_crossed_wishlist_return(call=call,
                                             message=message,
                                             wish_indexes=wish_indexes)
            # --------CROSS-------------------------------------------------------------------------------------------
            elif 'cross' in data:
                print('cross yes')
                done_cross_wishlist(message=message,
                                    call=call,
                                    wish_indexes=wish_indexes)
            # --------DELETE-------------------------------------------------------------------------------------------
            elif 'delete' in data and not user_prem:
                print('delete yes')
                done_delete_wishlist(message=message,
                                     call=call,
                                     wish_indexes=wish_indexes)
            # --------DELETE IND WISHLIST------------------------------------------------------------------------------
            elif 'delete' in data and user_prem:
                """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                print('delete ind yes')
                done_premium_individualWishlist_delete(message=message,
                                                       call=call,
                                                       wish_indexes=wish_indexes)
                """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
            else:
                print('–æ—à–∏–±–∫–∞ –≤ C–í–û–ï–í–†–ï–ú–ï–ù–ù–û–ï –î–ê')
                pass
        # --------–ù–ï–°–í–û–ï–í–†–ï–ú–ï–ù–ù–û–ï –î–ê (–•–£–ï–í–û, –ß–¢–û –í–û–û–ë–©–ï –¢–ê–ö. –ù–ê–î–û –ë–£–î–ï–¢ –ò–°–ü–†–ê–í–ò–¢–¨) UPD –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ----------------------
        else:  # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª –¥–∞ –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
            if not user_prem:
                rng = user.count_of_wishes(crossed=crossed)
            else:
                try:
                    rng = Premium(call.message.chat.id).count_of_individualWishes(int(data[3]))
                except Exception as e:
                    print('–æ—à–∏–±–∫–∞ –≤ poll_wishlist. individual', e)
                    return
            """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
            keyboard = start_keyboard(
                names=[str(i + 1) for i in range(rng)],
                # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—É–Ω–∫—Ç—ã –∂–µ–ª–∞–Ω–∏–π
                one_time_keyboard=False,
                first='–ì–æ—Ç–æ–≤–æ',
                last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
            sent = bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤', reply_markup=keyboard)
            bot.register_next_step_handler(sent, poll_wishlist, call,
                                           wish_indexes)  # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
    # --------–ì–û–¢–û–í–û->–ù–ï–¢----------------------------------------------------------------------------------------------
    elif message.text == '–ù–µ—Ç':  # –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä -> –Ω–µ—Ç
        """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        if not user_prem:
            rng = user.count_of_wishes(crossed=crossed)
        else:
            try:
                rng = Premium(call.message.chat.id).count_of_individualWishes(int(data[3]))
            except Exception as e:
                print('–æ—à–∏–±–∫–∞ –≤ poll_wishlist. individual', e)
                return
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        keyboard = start_keyboard(
            names=[str(i + 1) for i in range(rng)],
            # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—É–Ω–∫—Ç—ã –∂–µ–ª–∞–Ω–∏–π
            one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
        if len(wish_indexes) != 0:
            sent = bot.send_message(message.chat.id, '–ñ–¥—É –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                                    reply_markup=keyboard)
        else:
            sent = bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤',
                                    reply_markup=keyboard)
        bot.register_next_step_handler(sent, poll_wishlist, call,
                                       wish_indexes)  # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
    # --------–í–°–ï------------------------------------------------------------------------------------------------------
    elif message.text == '–í—Å–µ':  # –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ
        """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        if not user_prem:
            wish_indexes = [numb for numb in range(user.count_of_wishes(crossed=crossed))]
        else:
            wish_indexes = [numb for numb in
                            range(Premium(call.message.chat.id).count_of_individualWishes(int(data[3])))]
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        # --------–í–°–Å –ù–û–ú–ê–†–õ–¨–ù–û----------------------------------------------------------------------------------------
        if len(wish_indexes) != 0:
            # --------REEDIT-------------------------------------------------------------------------------------------
            if 'reedit' in data:
                print('reedit all')
                sent = bot.send_message(message.chat.id,
                                        f'–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------RETURN-------------------------------------------------------------------------------------------
            elif 'return' in data:
                print('return all')
                sent = bot.send_message(message.chat.id,
                                        f'–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------CROSS-------------------------------------------------------------------------------------------
            elif 'cross' in data:
                print('cross all')
                print(wish_indexes)
                sent = bot.send_message(message.chat.id,
                                        f'–í—ã—á–µ—Ä–∫–Ω—É—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            # --------DELETE----DELETE IND WISHLIST--------------------------------------------------------------------
            elif 'delete' in data:
                print('delete all')
                sent = bot.send_message(message.chat.id,
                                        f'–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è?',
                                        reply_markup=start_keyboard(['–î–∞', '–ù–µ—Ç'],
                                                                    True))
            else:
                print('all error. passed')
                sent = bot.send_message(message.chat.id,
                                        f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
                                        reply_markup=None)
                pass
            bot.register_next_step_handler(sent, poll_wishlist, call,
                                           wish_indexes)  # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
        # --------–í–°–Å –ù–ï –ù–û–†–ú–ê–õ–¨–ù–û-------------------------------------------------------------------------------------
        else:
            sent = bot.send_message(message.chat.id,
                                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –∞ –≤—ã –ø–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É')
    # --------–û–¢–ú–ï–ù–ê---------------------------------------------------------------------------------------------------
    elif message.text == '–û—Ç–º–µ–Ω–∞':  # –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∂–µ–ª–∞–Ω–∏–π
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
        # --------ReEDIT-------------------------------------------------------------------------------------------
        if 'reedit' in data:
            print('reedit cancel')
            bot.send_message(message.chat.id, f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=start_inline_keyboard({
                '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'wishlist_reedit',
                '–ù–∞–∑–∞–¥': 'wishlist'
            }))
        # --------RETURN-------------------------------------------------------------------------------------------
        elif 'return' in data:
            print('return cancel')
            bot.send_message(message.chat.id, f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=start_inline_keyboard({
                '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'wishlist_crossed_return',
                '–ù–∞–∑–∞–¥': 'wishlist'
            }))
        # --------CROSS-------------------------------------------------------------------------------------------
        elif 'cross' in data:
            print('cross cancel')
            bot.send_message(message.chat.id, f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=start_inline_keyboard({
                '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'wishlist_cross',
                '–ù–∞–∑–∞–¥': 'wishlist'
            }))
        # --------DELETE-------------------------------------------------------------------------------------------
        if 'delete' in data and not user_prem:
            print('delete cancel')
            bot.send_message(message.chat.id, f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=start_inline_keyboard({
                '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'wishlist_delete',
                '–ù–∞–∑–∞–¥': 'wishlist'
            }))
        if 'delete' in data and user_prem:
            """""""""""""""PREMIUM"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
            print('delete ind wishlist cancel')
            bot.send_message(message.chat.id, f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', reply_markup=start_inline_keyboard({
                '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å': call.data,
                '–ù–∞–∑–∞–¥': f'premium_individualWishlists_id_{data[3]}'
            }))
            """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        elif 'reserve' in data:
            wishlist(call=call, friend_id=int(data[4]), new_window=True)
        else:
            print('–æ—à–∏–±–∫–∞ –≤ –û–¢–ú–ï–ù–ê')
            pass
    # --------–ß–ò–°–õ–û----------------------------------------------------------------------------------------------------
    else:
        # print([i for i in message.text.split()], all([i for i in message.text.split()]))
        for msg in [i for i in message.text.split()]:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            try:
                int(msg)
            except Exception as e:  # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                print(e, '|number. for else error|')
                sent = bot.send_message(message.chat.id, '–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º', reply_markup=None)
                break
        # --------–ù–û–†–ú–ê–õ–¨–ù–û–ï –ß–ò–°–õ–û-------------------------------------------------------------------------------------
        else:  # –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ
            print(data)
            # --------RESERVE--------------------------------------------------------------------
            if 'reserve' in data:
                # rng = user.get_reserved_wishes(int(data[4]))[int(data[4])]['indexes']
                rng = User(int(data[4])).count_of_wishes()
                if Premium(int(data[4])).belong():
                    rng += Premium(int(data[4])).count_of_individualWishes(message.chat.id)
                print(f'count wishes = {rng}')
                if int(message.text) in [int(i + 1) for i in
                                         range(rng)]:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–∞ —Å—Ä–µ–¥–∏ –ø—É–Ω–∫—Ç–æ–≤ –∂–µ–ª–∞–Ω–∏–π
                    index = int(message.text) - 1
                    # print(f'msg text = {message.text}, index = {index}')
                    # bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å–∞–ª')
                    done_reserve_wishlist(call=call, index=index)
                    return
                # --------–ù–ï–í–ï–†–ù–û–ï –ß–ò–°–õ–û-----------------------------------------------------------------------------------
                else:
                    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')
            else:
                # --------NOT RESERVE--------------------------------------------------------------------
                if not user_prem:
                    rng = user.count_of_wishes(crossed=crossed)
                else:
                    rng = Premium(call.message.chat.id).count_of_individualWishes(int(data[3]))
                # --------–ü–†–û–í–ï–†–ö–ê –ß–ò–°–õ–ê –ù–ê –°–û–û–¢–í–¢–°–¢–í–ò–ï--------------------------------------------------------------------
                if int(message.text) in [int(i + 1) for i in
                                         range(rng)]:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–∞ —Å—Ä–µ–¥–∏ –ø—É–Ω–∫—Ç–æ–≤ –∂–µ–ª–∞–Ω–∏–π
                    if int(message.text) - 1 in wish_indexes:
                        sent = bot.send_message(message.chat.id, '–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ')
                    else:
                        wish_indexes.append(int(message.text) - 1)
                        wish_indexes = list(set(wish_indexes))
                        # print(message.text, wish_indexes)
                        sent = bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å–∞–ª')
                # --------–ù–ï–í–ï–†–ù–û–ï –ß–ò–°–õ–û-----------------------------------------------------------------------------------
                else:
                    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(sent,
                                       poll_wishlist,
                                       call,
                                       wish_indexes)  # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç. –õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –û—Ç–º–µ–Ω–∞


def premium(call):
    ans(call)
    if Premium(call.message.chat.id).belong():
        bot.edit_message_text(
            text='–ü—Ä–µ–º–∏—É–º  —Ñ—É–Ω–∫—Ü–∏–∏.\n\n'
                 '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–≤—à–∏—Ö –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∑–∞ –Ω—ã–Ω–µ—à–Ω—é—é –Ω–µ–¥–µ–ª—é\n\n'
                 '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö!\n'
                 '–†–µ–∂–∏–º "–î–æ–ø–æ–ª–Ω–∏—Ç—å" –ø–æ–∫–∞–∂–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π".\n'
                 '–†–µ–∂–∏–º "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å" –æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—à—å —Ç–µ –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏".\n\n'
                 '–ü–æ–º–∏–º–æ —Ç–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ –æ–ø–∏—Å–∞–Ω—ã –≤—ã—à–µ, –≤–∞–º —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏ –ø–∞—Å—Å–∏–≤–Ω—ã–µ:\n'
                 '–í–∞–º –≤–∏–¥–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –ü—Ä–µ–º–∏—É–º);\n'
                 '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∂–µ–ª–∞–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 32 –¥–æ 1000;\n'
                 '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 16 –¥–æ 48;\n',
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            reply_markup=start_inline_keyboard({'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 'premium_stats',
                                                '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏': 'premium_individualWishlists',
                                                '–ù–∞–∑–∞–¥': 'account'}, buttons_in_row=1))
    else:
        bot.edit_message_text(text='–ß—Ç–æ –¥–∞—ë—Ç –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø?\n\n'
                                   '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–≤—à–∏—Ö –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∑–∞ –Ω—ã–Ω–µ—à–Ω—é—é –Ω–µ–¥–µ–ª—é.\n\n'
                                   '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö!\n\n'
                                   '–°–º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –ü—Ä–µ–º–∏—É–º).\n\n'
                                   '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∂–µ–ª–∞–Ω–∏–π –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 128 –¥–æ 1000.\n\n'
                                   '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 16 –¥–æ 48.\n\n'
                              # '–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∂–µ–ª–∞–Ω–∏–π\n'
                              # '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (Excel, png, csv)'
                              ,
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=start_inline_keyboard({'–û—Ñ–æ—Ä–º–∏—Ç—å': 'premium_get',
                                                                  '–ù–∞–∑–∞–¥': 'account'}))


def got_premium(chat_id: int, product_name: str, message_id: int = None):
    if message_id is not None:
        try:
            bot.delete_message(chat_id=chat_id,
                               message_id=message_id)
        except Exception as e:
            print('–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤\n\n', e)
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text='–£–¥–∞–ª–µ–Ω–æ')
    bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø.\n–ß—Ç–æ–±—ã '
                              '–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ '
                              '–º–µ–Ω—é.\n–û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ –ê–∫–∫–∞—É–Ω—Ç ¬ª –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏; –ª–∏–±–æ –ø–æ '
                              '–∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!',
                     reply_markup=start_inline_keyboard({'–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏': 'premium'}))


def notify_premium(chat_id: int, days: int):
    if days != 1:
        bot.send_message(chat_id, f'–ß–µ—Ä–µ–∑ {days} –¥–Ω—è –∫–æ–Ω—á–∏—Ç—Å—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!', disable_notification=True)
    else:
        bot.send_message(chat_id,
                         f'–ó–∞–≤—Ç—Ä–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º! –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ —Å—Ç–∞–ª–æ –¥–ª—è –≤–∞—Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é',
                         disable_notification=True)


def lost_premium(chat_id: int):
    bot.send_message(chat_id,
                     '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–æ—à–ª–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–¥–µ—é—Å—å, —è –±—ã–ª –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω!\n\n–ï—â—ë —É–≤–∏–¥–∏–º—Å—è üëã',
                     disable_notification=True)


def premium_get(call, new_window: bool = False):
    positions = {'–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî 25‚ÇΩ': 0,
                 '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî 250‚ÇΩ': 1,
                 '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî 475‚ÇΩ': 2}
    names = {}
    for position in positions.keys():
        names.update({position: f'premium_get_{positions.get(position)}'})
    names.update({'–û—Ç–º–µ–Ω–∞': 'account'})
    keyboard = start_inline_keyboard(names, 1)
    if not new_window:
        bot.edit_message_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω',
                              chat_id=ID(call.message),
                              message_id=call.message.message_id,
                              reply_markup=keyboard)
    else:
        try:
            bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
        except Exception as e:
            print('–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤\n\n', e)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–£–¥–∞–ª–µ–Ω–æ')
        bot.send_message(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω',
                         chat_id=ID(call.message),
                         reply_markup=keyboard)


def premium_get_pay(call):
    product_index = int(call.data.split('_')[2])
    prices = [[types.LabeledPrice(label='–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', amount=25), '–û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –æ—Ç–º–µ—á–∞–µ—Ç–µ –ª–∏—à—å '
                                                                            '–æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏',
               'https://sun9-85.userapi.com/impg/Cn8o5M1S-cxFPcplYmZJtZciLx_r6oNO5Iv5Bw/cfZq3tbLfdE.jpg?size=300x300&quality=95&sign=82f0b64375f75cc16e26a93c880fd5bb&type=album'],
              [types.LabeledPrice(label='–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', amount=250), '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫ '
                                                                         '–¥–ª—è –≤–∞—Å —Å–æ–±—ã—Ç–∏–µ!',
               'https://sun9-8.userapi.com/impg/0C-Ca6jCfn6bxGQyQtyQMfEQ3iiC5Jxp3ymW7g/CDWRJMqyzE4.jpg?size=300x300&quality=95&sign=a1906137fb45a1bfd8d559b20c588964&type=album'],
              [types.LabeledPrice(label='–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', amount=475), '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∂–∏–∑–Ω–∏ –±–µ–∑ –º–µ–Ω—è '
                                                                           '–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∞—Ä–∏–≤–∞—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É '
                                                                           '–ø–æ–¥–ø–∏—Å–∫–∏!\n–ö—É–ø–∏–ª –µ—ë –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–±—ã–ª '
                                                                           '–Ω–∞–≤—Å–µ–≥–¥–∞!',
               'https://sun9-52.userapi.com/impg/OeOXzU4v-sAMhha8-0lrEOsSlHhOY_uctuRLmA/zTIz021Em0k.jpg?size=300x300&quality=95&sign=16bc7594a44041504601d77436d96629&type=album']]
    from payments.kassa import create_payment, create_text
    try:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
    except Exception as e:
        print('–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤\n\n', e)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–£–¥–∞–ª–µ–Ω–æ')
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1).add(
        *[telebot.types.InlineKeyboardButton(text='–§–æ—Ä–º–∏—Ä—É—é...',
                                             url='https://t.me/wishnya_wish_bot')],
        telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='premium_get'))
    sent = bot.send_photo(chat_id=call.message.chat.id,
                          photo=f'{prices[product_index][2]}',
                          caption=create_text(prices[product_index][0].amount,
                                              prices[product_index][0].label,
                                              prices[product_index][1]),
                          # reply_markup=start_inline_keyboard({'–§–æ—Ä–º–∏—Ä—É—é —Å—Å—ã–ª–∫—É...': 'pass', '–û—Ç–º–µ–Ω–∞': 'premium_get'}, 1),
                          reply_markup=keyboard,
                          )
    link = create_payment(
        amount=prices[product_index][0].amount,
        name=prices[product_index][0].label,
        message_id=sent.message_id,
        user_id=sent.chat.id
    )
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1).add(*[telebot.types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å',
                                                                                                        url=f'{link}')],
                                                                   telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                                                                      callback_data='premium_get'))
    bot.edit_message_reply_markup(chat_id=sent.chat.id,
                                  message_id=sent.message_id,
                                  reply_markup=keyboard)


def premium_individualWishlists(call, page_number: int):
    page_index = page_number - 1
    user_id = ID(call.message)
    if Premium(user_id).belong():
        user = User(user_id)
        list_friends = user.get_on_the_list()
        if len(list_friends) == 0:
            ans(call, '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –ø—É—Å—Ç')
        elif list_friends is None:
            ans(call, '–û—à–∏–±–∫–∞')
        else:
            couples = get_friends_couples(list_of_friends=list_friends,
                                          friends_on_page=8)  # —Ä–∞–∑–±–∏–≤–∞–µ–º –¥—Ä—É–∑–µ–π –ø–æ –∫—É—á–∫–∞–º (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –ø–æ 8 —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            couple = couples[page_index]
            keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –ª—é–¥—å–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            buttons = []  # –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏
            print("friend_couples -> ", couples)
            print('couple -> ', couple)
            for i in range(len(couple)):  # –∏–¥—ë–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥—É –≤ –∫—É—á–∫–µ
                deleted_friends = 0
                friend = User(couple[i]).get_info()  # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–µ
                if friend is None:
                    deleted_friends += 1
                    continue
                print(f'friend {i} -> ', friend)
                data = f'premium_individualWishlists_id_{friend["id"]}'
                if friend['username'] is not None:  # –µ—Å–ª–∏ username –µ—Å—Ç—å
                    buttons.append(
                        telebot.types.InlineKeyboardButton(  # –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏
                            f'"{str(friend["name"])}" {str(friend["username"])}',
                            callback_data=data
                        )
                    )
                else:  # –µ—Å–ª–∏ username –Ω–µ—Ç
                    buttons.append(
                        telebot.types.InlineKeyboardButton(  # –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏
                            f'{str(friend["name"])}',
                            callback_data=data
                        )
                    )
            for button in buttons:
                keyboard.row(button)  # –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if len(couples) != 1:
                prev = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥',
                                                          callback_data=f'premium_individualWishlists_prev_{page_number - 1}_{len(couples)}')  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                next = telebot.types.InlineKeyboardButton('–î–∞–ª—å—à–µ ¬ª',
                                                          callback_data=f'premium_individualWishlists_next_{page_number + 1}_{len(couples)}')
                keyboard.add(prev, next)
            message_text = f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∂–µ–ª–∞–Ω–∏–π.\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∏–∑ {len(couples)}'
            menu = telebot.types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
            keyboard.row(menu)
            bot.edit_message_text(chat_id=user_id,  # –º–µ–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç
                                  message_id=call.message.message_id,
                                  reply_markup=keyboard,
                                  text=message_text)
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


def premium_individualWishlist(call, friend_id, new_window: bool = False):
    user_id = ID(call.message)
    user_premium = Premium(user_id)
    if user_premium.belong():
        db_call = user_premium.get_individual_wishlist(friend_id=friend_id)
        ind_wishlist = db_call[0]
        mode = db_call[1]
        print('ind_wishlist = ', ind_wishlist, "mode = ", mode)
        if mode == 'add':
            mode = '–î–æ–ø–æ–ª–Ω–∏—Ç—å'
            if ind_wishlist is not None:
                wsh = User(user_id).get_wishlist()
                print('wsh =', wsh)
                if wsh == -1:
                    wishes = sorted_wishlist(ind_wishlist)
                else:
                    wishes = sorted_wishlist(wsh + ind_wishlist)
            else:
                wsh = User(user_id).get_wishlist()
                print('wsh =', wsh)
                if wsh == -1:
                    wishes = None
                else:
                    wishes = sorted_wishlist(wsh)
            print(wishes)
        else:
            mode = '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å'
            if ind_wishlist is not None:
                wishes = sorted_wishlist(ind_wishlist)
            else:
                wishes = None
        name = User(friend_id).get_name()
        if wishes is not None:
            if not new_window:
                bot.edit_message_text(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      text=f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –∏–º–µ–Ω–µ–º\n{name}\n\n'
                                           f'–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mode}\n\n'
                                           f'{wishes}',
                                      reply_markup=
                                      add_back(
                                          keyboard=add_back(
                                              keyboard=start_inline_keyboard(
                                                  {'–£–¥–∞–ª–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_delete',
                                                   '–î–æ–±–∞–≤–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_add'},
                                                  buttons_in_row=2),
                                              back_button={
                                                  '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º': f'premium_individualWishlists_id_{friend_id}_mode'}
                                          ),
                                          back_button={'–ù–∞–∑–∞–¥': 'premium_individualWishlists'}
                                      )
                                      )
            else:
                bot.send_message(chat_id=user_id,
                                 text=f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –∏–º–µ–Ω–µ–º\n{name}\n\n'
                                      f'–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mode}\n\n'
                                      f'{wishes}',
                                 reply_markup=
                                 add_back(
                                     keyboard=add_back(
                                         keyboard=start_inline_keyboard(
                                             {'–£–¥–∞–ª–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_delete',
                                              '–î–æ–±–∞–≤–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_add'},
                                             buttons_in_row=2),
                                         back_button={
                                             '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º': f'premium_individualWishlists_id_{friend_id}_mode'}
                                     ),
                                     back_button={'–ù–∞–∑–∞–¥': 'premium_individualWishlists'}
                                 )
                                 )
        else:
            if not new_window:
                bot.edit_message_text(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      text=f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π {name} –ø—É—Å—Ç!\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ –Ω–∞ '
                                           f'–¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏—Ç –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π". '
                                           f'–ß—Ç–æ–±—ã —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–º–µ–Ω—è–π—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å" –Ω–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç—å" –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É üëá\n\n'
                                           f'–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mode}',
                                      reply_markup=start_inline_keyboard(
                                          {'–î–æ–±–∞–≤–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_add',
                                           '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º': f'premium_individualWishlists_id_{friend_id}_mode',
                                           '–ù–∞–∑–∞–¥': 'premium_individualWishlists'
                                           },
                                          buttons_in_row=2)
                                      )
            else:
                bot.send_message(chat_id=user_id,
                                 text=f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π {name} –ø—É—Å—Ç!\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ –Ω–∞ '
                                      f'–¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏—Ç –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π". '
                                      f'–ß—Ç–æ–±—ã —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–º–µ–Ω—è–π—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å" –Ω–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç—å" –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É üëá\n\n'
                                      f'–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mode}',
                                 reply_markup=start_inline_keyboard(
                                     {'–î–æ–±–∞–≤–∏—Ç—å': f'premium_individualWishlists_id_{friend_id}_add',
                                      '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º': f'premium_individualWishlists_id_{friend_id}_mode',
                                      '–ù–∞–∑–∞–¥': 'premium_individualWishlists'
                                      },
                                     buttons_in_row=2)
                                 )
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


def premium_individualWishlist_add(call, friend_id):
    ans(call)
    user_id = call.message.chat.id
    cancel_keyboard = start_inline_keyboard({'–ù–∞–∑–∞–¥': f'cancel_prem_{friend_id}'}, 1)
    sent = bot.edit_message_text(chat_id=user_id,
                                 message_id=call.message.message_id,
                                 text='–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è!\n'
                                      '–ü—É–Ω–∫—Ç—ã –æ—Ç–¥–µ–ª—è–π—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏, –Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                                 reply_markup=cancel_keyboard)
    bot.register_next_step_handler(sent, done_premium_individualWishlist_add, call, friend_id)


def done_premium_individualWishlist_add(message, call, friend_id):
    user_id = message.chat.id
    user_premium = Premium(user_id)
    if user_premium.belong():
        if user_premium.add_individual_wishes(friend_id, message.text.split('\n')):  # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
            print('premium_individualWishlist_added. wishes to add -> ', message.text.split('\n'))
            bot.edit_message_text(chat_id=message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–î–æ–±–∞–≤–ª—è—é')
            bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª', reply_markup=types.ReplyKeyboardRemove())
            premium_individualWishlist(call=call,
                                       friend_id=friend_id,
                                       new_window=True)
        else:
            print('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ add_wishlist')
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


# -------–£–î–ê–õ–ò–¢–¨-----------------------------------
def premium_individualWishlist_delete(call, friend_id):
    id = ID(call.message)
    user_prem = Premium(id)
    if user_prem.belong():
        count = user_prem.count_of_individualWishes(friend_id=friend_id)
        if count is not None:

            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=None)
            keyboard = start_keyboard(names=[str(i + 1) for i in range(count)],
                                      one_time_keyboard=False, first='–ì–æ—Ç–æ–≤–æ', last='–í—Å–µ').row('–û—Ç–º–µ–Ω–∞')
            sent = bot.send_message(call.message.chat.id,
                                    '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å:',
                                    reply_markup=keyboard)
            bot.register_next_step_handler(sent, poll_wishlist, call,
                                           None)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ poll_wishlist(sent, call, sent.message_id)
        else:
            ans(call, '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


def done_premium_individualWishlist_delete(message, call, wish_indexes):
    user_prem = Premium(message.chat.id)
    friend_id = int(call.data.split('_')[3])
    if user_prem.belong():
        wishes_to_delete = user_prem.get_individual_wishlist_by_indexes(indexes=[i for i in wish_indexes],
                                                                        friend_id=friend_id)
        print('wishes to delete', wishes_to_delete)
        deleted = user_prem.delete_individual_wishes(friend_id=friend_id,
                                                     wishes_to_delete=wishes_to_delete)
        print('DELETE = ', deleted)
        if deleted:
            bot.edit_message_text(text='–£–¥–∞–ª—è—é', chat_id=message.chat.id, message_id=call.message.message_id)
            bot.send_message(ID(message), '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())
            premium_individualWishlist(call, friend_id, True)
        else:
            print('–æ—à–∏–±–∫–∞ –≤ done_premium_individualWishlist_delete. –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ delete –ø–æ–∂–µ–ª–∞–Ω–∏—è')
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=types.ReplyKeyboardRemove())
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


def premium_individualWishlist_mode(call, friend_id):
    user_id = ID(call.message)
    user_prem = Premium(user_id)
    if user_prem.belong():
        print('changed?', user_prem.change_mode(friend_id=friend_id))
        premium_individualWishlist(call=call, friend_id=friend_id)
    else:
        ans(call, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')


def premium_stats(call):
    ans(call)
    prem = Premium(call.message.chat.id)
    if prem.belong():
        view_count = len(Premium(ID(call.message)).get_views())
        if view_count != 0:
            bot.edit_message_text(chat_id=ID(call.message),
                                  text=f'–ó–∞ –Ω—ã–Ω–µ—à–Ω—é—é –Ω–µ–¥–µ–ª—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ {view_count} —á–µ–ª–æ–≤–µ–∫!',
                                  message_id=call.message.message_id,
                                  reply_markup=start_inline_keyboard({'–ù–∞–∑–∞–¥': 'premium'}))
        else:
            bot.edit_message_text(chat_id=ID(call.message),
                                  text=f'–ó–∞ –Ω—ã–Ω–µ—à–Ω—é—é –Ω–µ–¥–µ–ª—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª :(',
                                  message_id=call.message.message_id,
                                  reply_markup=start_inline_keyboard({'–ù–∞–∑–∞–¥': 'premium'}))
    else:
        ans(call, text='–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω—É–∂–µ–Ω –ü—Ä–µ–º–∏—É–º')


def ans(call, text: str = ''):
    bot.answer_callback_query(callback_query_id=call.id, text=text)


@bot.message_handler(content_types=['text'])
def text(message):
    print(message.text)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    id = call.message.chat.id
    try:
        if call.message:
            if registered(id):
                data = call.data.split('_')
                print(data)
                if data[0] == 'createRequest':  # –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    create_request(call)
                    # bot.edit_message_text(
                    #     text=f'–î–µ—Ä–∂–∏ –±–µ—Å—Å—Ä–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã:\n\n{create_request_link(id)}\n\n–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –µ—ë —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º',
                    #     chat_id=id,
                    #     message_id=call.message.message_id,
                    #     reply_markup=start_inline_keyboard({'–ù–∞–∑–∞–¥': 'friends'}))
                    ans(call)
                elif data[0] == 'account':
                    if len(data) == 1:
                        ans(call)
                        account_settings(call)
                    elif data[1] == 'update':
                        ans(call)
                        account_update(call)
                    elif data[1] == 'delete':
                        ans(call)
                        if len(data) == 2:
                            delete_account(call=call,
                                           deleting_mode=False)
                        else:
                            if data[2] == 'yes':
                                delete_account(call=call,
                                               deleting_mode=True)
                            else:
                                account_settings(call)
                elif data[0] == 'friends':
                    # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•------–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------
                    if len(data) == 2:
                        friend_list(call, 1)
                    elif (len(data) == 3) or (len(data) == 4):
                        if data[2] == 'deleteAll':
                            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                            if data[1] == 'subscribers':
                                if len(data) == 3:
                                    subscriber_deleteAll(call)
                                elif len(data) == 4:
                                    if data[3] == 'yes':
                                        subscriber_deleteAll(call, True)
                                    else:
                                        friend_list(call, 1)
                            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
                            elif data[1] == 'subscribes':
                                if len(data) == 3:
                                    unsubscribe_all(call)
                                elif len(data) == 4:
                                    if data[3] == 'yes':
                                        unsubscribe_all(call, True)
                                    else:
                                        friend_list(call, 1)
                            # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
                            else:
                                pass
                        elif data[2] == 'acceptAll':
                            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                            if data[1] == 'subscribers':
                                pass
                    elif any(i == data[2] for i in ['prev', 'next']):
                        page_number = int(data[3])
                        pages = int(data[4])
                        if page_number < 1 or page_number > pages:
                            ans(call, '–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞')
                        else:
                            friend_list(call, page_number)
                elif data[0] == 'friend':
                    # -----–ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø-----------------------------------------------------------------------------------------------
                    if data[2] == 'id':
                        id = int(data[3])
                        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                        if data[1] == 'subscribers':
                            subscriber(call, id)
                        # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
                        elif data[1] == 'subscribes':
                            wishlist(call=call, friend_id=id, new_window=False)
                        # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
                        else:
                            wishlist(call=call, friend_id=id, new_window=False)
                    # -----–ó–ê–†–ï–ó–ï–†–í–ò–†–û–†–û–¢–¨-----------------------------------------------------------------------------------------------
                    elif data[2] == 'reserve':
                        reserve_wishlist(call)
                    # -----–£–î–ê–õ–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø-----------------------------------------------------------------------------------------------
                    elif data[2] == 'delete':
                        id = int(data[3])
                        if len(data) == 5:
                            if data[4] == 'yes':
                                # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                                if data[1] == 'subscribers':
                                    subscriber_delete(call, True)
                                # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
                                elif data[1] == 'subscribes':
                                    unsubscribe(call, True)
                                # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
                                else:
                                    delete_friend(call, True)
                            elif data[4] == 'no':
                                # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                                if data[1] == 'subscribers':
                                    subscriber(call, id)
                                # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
                                elif data[1] == 'subscribes':
                                    wishlist(call=call, friend_id=id, new_window=False)
                                # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
                                else:
                                    wishlist(call=call, friend_id=id, new_window=False)
                        else:
                            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•-----------------------------------------------------------------------------------------------
                            if data[1] == 'subscribers':
                                subscriber_delete(call, False)
                            # -----–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–•-----------------------------------------------------------------------------------------------
                            elif data[1] == 'subscribes':
                                unsubscribe(call, False)
                            # -----–°–ü–ò–°–û–ö –î–†–£–ó–ï–ô-----------------------------------------------------------------------------------------------
                            else:
                                delete_friend(call, False)
                    elif data[2] == 'add':
                        if data[1] == 'subscribers':
                            add_friend(call)
                # ---------–ú–ï–ù–Æ-----------------------------------------------------------------------------
                elif call.data == 'menu':
                    menu(call.message, True)
                    ans(call)
                elif data[0] == 'premium':
                    if len(data) == 1:
                        premium(call)
                    elif len(data) > 1:
                        if data[1] == 'stats':
                            premium_stats(call)
                        elif data[1] == 'individualWishlists':
                            print(data)
                            if len(data) == 2:
                                premium_individualWishlists(call, 1)
                            elif any(i == data[2] for i in ['prev', 'next']):
                                page_number = int(data[3])
                                pages = int(data[4])
                                # -----------–°–ü–ò–°–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–Æ–©–ò–•--------------------------------------------------------------
                                if page_number < 1 or page_number > pages:
                                    ans(call, '–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞')
                                else:
                                    premium_individualWishlists(call, page_number)
                            elif data[2] == 'id':
                                if data[3].isdigit():
                                    friend_id = int(data[3])
                                    if len(data) == 5:
                                        if data[4] == 'mode':
                                            premium_individualWishlist_mode(call, friend_id)
                                        elif data[4] == 'add':
                                            premium_individualWishlist_add(call, friend_id)
                                        elif data[4] == 'delete':
                                            if Premium(ID(call.message)).get_individual_wishlist(friend_id)[1] == 'add':
                                                premium_individualWishlist_mode(call=call, friend_id=friend_id)
                                            premium_individualWishlist_delete(call, friend_id)
                                    else:
                                        premium_individualWishlist(call, friend_id)
                                else:
                                    ans(call, '–û—à–∏–±–∫–∞')
                                # premium_individualWishlists_id_
                        elif data[1] == 'get':
                            if len(data) == 3:
                                if data[2].isdigit():
                                    premium_get_pay(call)
                            else:
                                print('+++++++++++++++++++++++++++++++++++++')
                                print(call.message.content_type)
                                print('+++++++++++++++++++++++++++++++++++++')
                                ans(call)
                                # if call.message.invoice is None:
                                if call.message.content_type == 'text':
                                    premium_get(call)
                                else:
                                    premium_get(call, True)
                # ---------–°–ü–ò–°–û–ö –ñ–ï–õ–ê–ù–ò–ô-----------------------------------------------------------------------------
                elif data[0] == 'wishlist':  # —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π
                    # ---------–ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê WISHLIST()----------------------------------------------------------
                    if len(data) == 1:  # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (–º–µ–Ω—é "–ø–æ–∫–∞–∑–∞—Ç—å" "–∏–∑–º–µ–Ω–∏—Ç—å")
                        wishlist(call)
                    # ---------–î–û–ë–ê–í–ò–¢–¨ –ñ–ï–õ–ê–ù–ò–Ø-----------------------------------------------------------------------
                    elif data[1] == 'add':
                        add_wishes(call)
                    # ---------–ò–ó–ú–ï–ù–ò–¢–¨ –°–ü–ò–°–û–ö –ñ–ï–õ–ê–ù–ò–ô (–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ò–õ–ò –£–î–ê–õ–ò–¢–¨)------------------------------------
                    elif data[1] == 'edit':  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫
                        wishlist_editor(call)
                    # ---------–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨---------------------------------------------------------------------------
                    elif data[1] == 'reedit':  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫
                        # ---------–ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö –ú–ï–ù–Æ------------------------------------------------------------------
                        reedit_wishlist(call)
                    elif data[1] == 'delete':  # —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç—ã
                        delete_wishlist(call)
                    # ---------–í–´–ß–ï–†–ö–ù–£–¢–¨------------------------------------------------------------------------------
                    elif data[1] == 'cross':
                        cross_wishlist(call)
                    # ---------–í–´–ß–ï–†–ö–ù–£–¢–´–ï-----------------------------------------------------------------------------
                    elif data[1] == 'crossed':
                        # ---------–ú–ï–ù–Æ –í–´–ß–ï–†–ö–ù–£–¢–´–• –ñ–ï–õ–ê–ù–ò–ô------------------------------------------------------------
                        if len(data) == 2:
                            crossed_wishlist(call)
                        # ---------–í–ï–†–ù–£–¢–¨ –ñ–ï–õ–ê–ù–ò–Ø---------------------------------------------------------------------
                        elif data[2] == 'return':
                            crossed_wishlist_return(call)
                        # ---------–£–î–ê–õ–ò–¢–¨ –í–´–ß–ï–†–ö–ù–£–¢–´–ï –ñ–ï–õ–ê–ù–ò–Ø---------------------------------------------------------
                        elif data[2] == 'delete':
                            delete_wishlist(call)
                    elif data[1] == 'reserve':
                        reserve_wishlist(call)
                    else:
                        print('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å wishlist')
                    ans(call)
                elif data[0] == 'admin':
                    ids = select_call("SELECT id FROM users;")
                elif data[0] == 'cancel':
                    if len(data) == 3:
                        if data[1] == 'prem':
                            ans(call)
                            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                            premium_individualWishlist(call=call,
                                                       friend_id=data[2])
                    else:
                        ans(call)
                        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                        wishlist(call)
                elif call.data == 'skip':  # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
                    ans(call)
                    pass
                else:
                    print('callback error')
            else:
                bot.send_message(id,
                                 '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ñ–º–∏ /registration')
                ans(call)
        ans(call)
    except Exception as e:
        print(repr(e))


def bot_polling():
    # print('bot is running')
    bot.polling(
        none_stop=True
    )
